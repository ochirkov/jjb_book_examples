pipeline {

    agent {
        node {
            label 'master'
            customWorkspace '/tmp/Test_Pipeline/custom_workspace'
        }
    }

    environment {
        CMD = 'tox -e'
        DIR = 'jjb-repo'
    }

    options {

        timestamps()

    }

    stages {

        stage ('Checkout Jenkins Job Builder Repo') {
            steps {

                checkout(
                    [$class: 'GitSCM',
                    branches: [[name: 'master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory',
                    relativeTargetDir: "${DIR}"],
                    [$class: 'UserIdentity',
                    email: 'jjb-book',
                    name: 'jjb-book@example.com']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/openstack-infra/jenkins-job-builder.git']]]
                )
            }
        }

        stage('Parallel Stage') {

            parallel {

                stage ('Python 2.7 Unit Tests') {
                    steps {

                        echo 'Run python 2.7 tests'

                        dir("${DIR}") {
                            sh "${CMD} py27"
                        }
                    }
                }


                stage ('Python 3.4 Unit Tests') {
                    steps {

                        echo 'Run python 3.4 tests'

                        dir("${DIR}") {
                            sh "${CMD} py34"
                        }
                    }
                }

                stage ('Python 3.5 Unit Tests') {
                    steps {

                        echo 'Run python 3.5 tests'

                        dir("${DIR}") {
                            sh "${CMD} py35"
                        }
                    }
                }

                stage ('Docs syntax check') {
                    steps {

                        echo 'Run python linter'

                        dir("${DIR}") {
                            sh "${CMD} docs-linkcheck"
                        }
                    }
                }
            }
        }

        stage ('Generating docs') {
            steps {

                echo 'Starting generate docs'

                dir("${DIR}") {
                    sh "${CMD} docs"
                    archiveArtifacts 'doc/build/html/index.html'
                }
            }
        }

        stage('Sanity check') {

            when {
                environment name: 'PUBLISH_DOCS',
                value: 'true'
            }

            steps {
                input "Proceeding with deployment?"
            }
        }

        stage('Deploy') {

            when {
                environment name: 'PUBLISH_DOCS',
                value: 'true'
            }

            steps {
                dir("${DIR}") {
                    echo 'Deploying documentation artifact'
                    sh 'cp doc/build/html/index.html /usr/share/nginx/html/'
                }
            }
        }
    }

    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir() /* clean up our workspace */
        }
        success {
            echo 'I succeeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
            slackSend channel: '#ops-channel', color: '#f44336', message: 'Pipeline failed', teamDomain: '<domain>', token: '<token>'
        }
        changed {
            echo 'Things were different before...'
        }
    }
}